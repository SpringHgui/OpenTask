// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenTask.Persistence.Contexts;

#nullable disable

namespace OpenTask.Persistence.Migrations
{
    [DbContext(typeof(OpenTaskContext))]
    [Migration("20240626091456_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OpenTask.Persistence.Entitys.OtLocker", b =>
                {
                    b.Property<string>("Resource")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("resource")
                        .HasComment("资源唯唯一标识");

                    b.Property<DateTime>("LockedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("locked_at")
                        .HasComment("获取锁的开始时间");

                    b.Property<string>("LockedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("locked_by")
                        .HasDefaultValueSql("''")
                        .HasComment("加锁者");

                    b.Property<int>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version")
                        .HasComment("资源版本号");

                    b.HasKey("Resource")
                        .HasName("PRIMARY");

                    b.ToTable("ot_locker");
                });

            modelBuilder.Entity("OpenTask.Persistence.Entitys.OtServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("自增主键");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("end_point")
                        .HasComment("集群内部访问地址");

                    b.Property<DateTime>("HeartAt")
                        .HasColumnType("datetime")
                        .HasColumnName("heart_at")
                        .HasComment("最后一次心跳时间");

                    b.Property<string>("ServerId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("server_id")
                        .HasComment("server唯一标识");

                    b.Property<int>("SlotEnd")
                        .HasColumnType("int")
                        .HasColumnName("slot_end")
                        .HasComment("0~16383");

                    b.Property<int>("SlotFrom")
                        .HasColumnType("int")
                        .HasColumnName("slot_from")
                        .HasComment("0~16383");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ServerId" }, "idx_server_id")
                        .IsUnique();

                    b.ToTable("ot_server");
                });

            modelBuilder.Entity("OpenTask.Persistence.Entitys.OtTaskInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("自增主键");

                    b.Property<string>("AlarmConf")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("alarm_conf")
                        .HasDefaultValueSql("''")
                        .HasComment("报警配置");

                    b.Property<string>("AlarmType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("alarm_type")
                        .HasDefaultValueSql("''")
                        .HasComment("报警类型");

                    b.Property<string>("Appid")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("appid")
                        .HasDefaultValueSql("''")
                        .HasComment("所属应用appid");

                    b.Property<sbyte>("AttemptInterval")
                        .HasColumnType("tinyint")
                        .HasColumnName("attempt_interval")
                        .HasComment("重试间隔 单位s");

                    b.Property<sbyte>("AttemptMax")
                        .HasColumnType("tinyint")
                        .HasColumnName("attempt_max")
                        .HasComment("重试次数");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''")
                        .HasComment("任务描述");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled")
                        .HasComment("启用/禁用");

                    b.Property<string>("HandleParams")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("handle_params")
                        .HasDefaultValueSql("''")
                        .HasComment("执行参数");

                    b.Property<string>("Handler")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("handler")
                        .HasDefaultValueSql("''")
                        .HasComment("任务handler名");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''")
                        .HasComment("任务名称");

                    b.Property<string>("ScheduleMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("schedule_mode")
                        .HasDefaultValueSql("''")
                        .HasComment("调度类型，单机/广播");

                    b.Property<int>("Slot")
                        .HasColumnType("int")
                        .HasColumnName("slot")
                        .HasComment("槽");

                    b.Property<string>("TimeConf")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("time_conf")
                        .HasDefaultValueSql("''")
                        .HasComment("调度时间配置 根据time_type不同而不同");

                    b.Property<string>("TimeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("time_type")
                        .HasDefaultValueSql("''")
                        .HasComment("调度时间类型");

                    b.Property<long>("TriggerLastTime")
                        .HasColumnType("bigint")
                        .HasColumnName("trigger_last_time")
                        .HasComment("最后一次调度时间");

                    b.Property<long>("TriggerNextTime")
                        .HasColumnType("bigint")
                        .HasColumnName("trigger_next_time")
                        .HasComment("下次调度时间");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "idx_name")
                        .IsUnique();

                    b.HasIndex(new[] { "Slot" }, "idx_slot");

                    b.ToTable("ot_task_info");
                });

            modelBuilder.Entity("OpenTask.Persistence.Entitys.OtTaskLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("自增主键");

                    b.Property<sbyte>("AlarmStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("alarm_status")
                        .HasComment("报警状态 0-默认、1-无需告警、2-告警成功、3-告警失败");

                    b.Property<string>("HandleClient")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("handle_client")
                        .HasDefaultValueSql("''")
                        .HasComment("处理任务客户端id");

                    b.Property<string>("HandleResult")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("handle_result")
                        .HasDefaultValueSql("''")
                        .HasComment("处理结果");

                    b.Property<DateTime?>("HandleStart")
                        .HasColumnType("datetime")
                        .HasColumnName("handle_start")
                        .HasComment("处理开始时间");

                    b.Property<sbyte>("HandleStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("handle_status")
                        .HasComment("处理状态");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id")
                        .HasComment("任务id（taskinfo表主键）");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "idx_task_id");

                    b.ToTable("ot_task_log");
                });

            modelBuilder.Entity("OpenTask.Persistence.Entitys.OtUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasComment("用户id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasComment("创建时间");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasDefaultValueSql("''")
                        .HasComment("密码");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("user_name")
                        .HasDefaultValueSql("''")
                        .HasComment("用户名");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserName" }, "idx_user_name")
                        .IsUnique();

                    b.ToTable("ot_user");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 6, 26, 17, 14, 56, 497, DateTimeKind.Local).AddTicks(4529),
                            Password = "xhGgU5Uh435OAbPeJ0SV7w==",
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
