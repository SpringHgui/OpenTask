/* tslint:disable */
/* eslint-disable */
/**
 * OpenTask.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListTopTaskLogResponseBaseResponse,
  StatisticsResponseBaseResponse,
  TaskLogsDayTrendResponseBaseResponse,
} from '../models/index';
import {
    ListTopTaskLogResponseBaseResponseFromJSON,
    ListTopTaskLogResponseBaseResponseToJSON,
    StatisticsResponseBaseResponseFromJSON,
    StatisticsResponseBaseResponseToJSON,
    TaskLogsDayTrendResponseBaseResponseFromJSON,
    TaskLogsDayTrendResponseBaseResponseToJSON,
} from '../models/index';

export interface TaskLogsDayTrendRequest {
    start?: Date;
    end?: Date;
}

export interface TopTaskLogRequest {
    start: Date;
    end: Date;
    count?: number;
}

/**
 * 
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     */
    async statisticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatisticsResponseBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Dashboard/Statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatisticsResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async statistics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatisticsResponseBaseResponse> {
        const response = await this.statisticsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async taskLogsDayTrendRaw(requestParameters: TaskLogsDayTrendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskLogsDayTrendResponseBaseResponse>> {
        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['Start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['End'] = (requestParameters['end'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Dashboard/TaskLogsDayTrend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskLogsDayTrendResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async taskLogsDayTrend(requestParameters: TaskLogsDayTrendRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskLogsDayTrendResponseBaseResponse> {
        const response = await this.taskLogsDayTrendRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async topTaskLogRaw(requestParameters: TopTaskLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTopTaskLogResponseBaseResponse>> {
        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling topTaskLog().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling topTaskLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['Start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['End'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['count'] != null) {
            queryParameters['Count'] = requestParameters['count'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Dashboard/TopTaskLog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTopTaskLogResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async topTaskLog(requestParameters: TopTaskLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTopTaskLogResponseBaseResponse> {
        const response = await this.topTaskLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
