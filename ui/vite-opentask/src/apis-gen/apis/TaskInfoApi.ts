/* tslint:disable */
/* eslint-disable */
/**
 * OpenTask.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddTaskRequest,
  AddTaskResponseBaseResponse,
  DeleteTaskRequest,
  DeleteTaskResponseBaseResponse,
  ExcuteOnceRequest,
  ExcuteOnceResponseBaseResponse,
  GetNext5TriggertimesResponseBaseResponse,
  ListTaskInfosResponseBaseResponse,
  SwitchTaskStatusRequest,
  SwitchTaskStatusResponseBaseResponse,
} from '../models/index';
import {
    AddTaskRequestFromJSON,
    AddTaskRequestToJSON,
    AddTaskResponseBaseResponseFromJSON,
    AddTaskResponseBaseResponseToJSON,
    DeleteTaskRequestFromJSON,
    DeleteTaskRequestToJSON,
    DeleteTaskResponseBaseResponseFromJSON,
    DeleteTaskResponseBaseResponseToJSON,
    ExcuteOnceRequestFromJSON,
    ExcuteOnceRequestToJSON,
    ExcuteOnceResponseBaseResponseFromJSON,
    ExcuteOnceResponseBaseResponseToJSON,
    GetNext5TriggertimesResponseBaseResponseFromJSON,
    GetNext5TriggertimesResponseBaseResponseToJSON,
    ListTaskInfosResponseBaseResponseFromJSON,
    ListTaskInfosResponseBaseResponseToJSON,
    SwitchTaskStatusRequestFromJSON,
    SwitchTaskStatusRequestToJSON,
    SwitchTaskStatusResponseBaseResponseFromJSON,
    SwitchTaskStatusResponseBaseResponseToJSON,
} from '../models/index';

export interface AddTaskInfoRequest {
    addTaskRequest?: AddTaskRequest;
}

export interface DeleteTaskOperationRequest {
    deleteTaskRequest?: DeleteTaskRequest;
}

export interface ExcuteOnceOperationRequest {
    excuteOnceRequest?: ExcuteOnceRequest;
}

export interface GetNext5TiggertimesRequest {
    taskId?: string;
}

export interface ListTaskInfosRequest {
    name?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface SwitchTaskStatusOperationRequest {
    switchTaskStatusRequest?: SwitchTaskStatusRequest;
}

/**
 * 
 */
export class TaskInfoApi extends runtime.BaseAPI {

    /**
     */
    async addTaskInfoRaw(requestParameters: AddTaskInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddTaskResponseBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TaskInfo/AddTaskInfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTaskRequestToJSON(requestParameters['addTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddTaskResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async addTaskInfo(requestParameters: AddTaskInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddTaskResponseBaseResponse> {
        const response = await this.addTaskInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTaskRaw(requestParameters: DeleteTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteTaskResponseBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TaskInfo/DeleteTask`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTaskRequestToJSON(requestParameters['deleteTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTaskResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteTask(requestParameters: DeleteTaskOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteTaskResponseBaseResponse> {
        const response = await this.deleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async excuteOnceRaw(requestParameters: ExcuteOnceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExcuteOnceResponseBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TaskInfo/ExcuteOnce`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExcuteOnceRequestToJSON(requestParameters['excuteOnceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExcuteOnceResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async excuteOnce(requestParameters: ExcuteOnceOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExcuteOnceResponseBaseResponse> {
        const response = await this.excuteOnceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getNext5TiggertimesRaw(requestParameters: GetNext5TiggertimesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNext5TriggertimesResponseBaseResponse>> {
        const queryParameters: any = {};

        if (requestParameters['taskId'] != null) {
            queryParameters['TaskId'] = requestParameters['taskId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TaskInfo/GetNext5Tiggertimes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNext5TriggertimesResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async getNext5Tiggertimes(requestParameters: GetNext5TiggertimesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNext5TriggertimesResponseBaseResponse> {
        const response = await this.getNext5TiggertimesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTaskInfosRaw(requestParameters: ListTaskInfosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTaskInfosResponseBaseResponse>> {
        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['Name'] = requestParameters['name'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TaskInfo/ListTaskInfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTaskInfosResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async listTaskInfos(requestParameters: ListTaskInfosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTaskInfosResponseBaseResponse> {
        const response = await this.listTaskInfosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async switchTaskStatusRaw(requestParameters: SwitchTaskStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SwitchTaskStatusResponseBaseResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TaskInfo/SwitchTaskStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SwitchTaskStatusRequestToJSON(requestParameters['switchTaskStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SwitchTaskStatusResponseBaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async switchTaskStatus(requestParameters: SwitchTaskStatusOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SwitchTaskStatusResponseBaseResponse> {
        const response = await this.switchTaskStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
